<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[一行命令下载 YouTube 视频]]></title>
      <url>/2018/04/17/%E5%91%BD%E4%BB%A4%E4%B8%8B%E8%BD%BD%20YouTube%20%E8%A7%86%E9%A2%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><a href="youtube.com">YouTube</a> 是全球最大的视频网站，人类的希望 Google 的子公司。</p>
<a id="more"></a>
<p>下图显示了无法观看 YouTube 的国家（或地区），包括但不限于：伊朗、土耳其、中国和巴基斯坦等。</p>
<p><img src="/images/placeholder.gif" alt="" data-src="https://www.motherjones.com/wp-content/uploads/socialmediamap-1.jpg" class="lazyload"></p>
<p>借助 SS，<code>Across the Great Wall, we can reach every corner in the world</code>。但是对于优秀的视频，我们还可以选择下载下来，毕竟 YouTube 很多2k、4k的高清视频。借助 <a href="https://github.com/rg3/youtube-dl" target="_blank" rel="noopener">YouTube-DL</a> ，一行命令就可以搞定，甚至支持 YouTube 之外的很多视频网站。</p>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><pre><code class="bash">sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
sudo chmod a+rx /usr/local/bin/youtube-dl
</code></pre>
<p>如果没有 <code>curl</code>：</p>
<pre><code class="bash">sudo wget https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl
sudo chmod a+rx /usr/local/bin/youtube-dl
</code></pre>
<p>然后<code>brew install youtube-dl</code>即可。</p>
<h2 id="2-配置（可选）"><a href="#2-配置（可选）" class="headerlink" title="2. 配置（可选）"></a>2. 配置（可选）</h2><p>在系统根目录下创建一个<code>/etc/youtube-dl.conf</code>文件，然后<code>vim /etc/youtube-dl.conf</code>或者直接打开文件编辑之：</p>
<pre><code class="bash"># 在Shadowsocks客户端的设置里查看 Socks5 的本地监听地址和端口
--proxy socks5://127.0.0.1:1080

# 这个命令表示下载分辨率高度不大于1440，音质选择最佳的视频
-f &#39;bestvideo[height&lt;=1440]+bestaudio&#39;

# 下载文件夹路径
-o /Volumes/Downs/Video/%(title)s.%(ext)s
</code></pre>
<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>如果你没有配置，则可以在命令行里指定代理或者下载视频的具体配置（格式、分辨率等）：</p>
<pre><code class="bash">youtube-dl -f bestvideo+bestaudio --proxy socks5://127.0.0.1:1080 https://www.youtube.com/watch?v=Mo949gB8-W0
</code></pre>
<p>如果你已经配置，或者想使用默认配置，则直接<code>youtube-dl</code>+ 视频 url 即可：</p>
<pre><code class="bash">youtube-dl https://www.youtube.com/watch?v=Mo949gB8-W0
</code></pre>
<p>请注意，如果下载失败，那么可能是你需要配置正确的代理。如果你使用 Shadowsocks，在客户端的设置里查看 Socks5 的本地监听地址和端口</p>
]]></content>
      
        
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Proxychains 代理命令行]]></title>
      <url>/2018/04/17/%E4%BD%BF%E7%94%A8%20Proxychains%20%E4%BB%A3%E7%90%86%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>如果你已经在使用 Shadowsocks，但是需要用命令行来下载 GFW 外的文件，那么你可以使用 Proxychains 代理命令行（Terminal）。</p>
<a id="more"></a>
<h2 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0. 准备工作"></a>0. 准备工作</h2><p>在命令行输入<code>brew</code>以检查是否安装了<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>，若没有，则输入下面的命令来安装：</p>
<pre><code class="bash">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
<h2 id="1-安装-Proxychains："><a href="#1-安装-Proxychains：" class="headerlink" title="1. 安装 Proxychains："></a>1. 安装 Proxychains：</h2><pre><code class="bash">brew install proxychains-ng
</code></pre>
<h2 id="2-查看-SS-本地端口号"><a href="#2-查看-SS-本地端口号" class="headerlink" title="2. 查看  SS 本地端口号"></a>2. 查看  SS 本地端口号</h2><p>Shadowsocks设置——本地 Socks5 监听地址（以及端口，默认是 <code>1080</code>）</p>
<h2 id="3-修改-Proxychains-配置文件"><a href="#3-修改-Proxychains-配置文件" class="headerlink" title="3. 修改 Proxychains 配置文件"></a>3. 修改 Proxychains 配置文件</h2><p>路径是<code>/usr/local/etc/proxychains.conf</code></p>
<pre><code>vim /usr/local/etc/proxychains.conf
</code></pre><p>vim是文本编辑命令，按下<code>I</code>进入编辑，找到文件最后的<code>[ProxyList]</code>, 输入步骤2查看的本地监听地址和端口，如<code>socks5  127.0.0.1 1080</code>, 然后点esc，输入<code>:wq</code>进行保存</p>
<h2 id="4-无法代理？"><a href="#4-无法代理？" class="headerlink" title="4. 无法代理？"></a>4. 无法代理？</h2><p>如果使用的<strong>OS X 系统 是 10.11 以下，则跳过这一步</strong>。由于 OS X 的新版本引入了一个新机制 <code>SIP (System Integrity Protection)</code>，即使 Root 权限也不能对一些二进制进行修改，这些二进制是在 <code>/System，/bin，/sbin，/usr (except /usr/local)</code> 中的。这就影响了 <code>proxychains</code> 的作用范围，不在上述目录中的二进制可以使用 <code>proxychains</code>，而在其中的就不行了。从目前的资料有来，有以下两种解决方法：</p>
<ul>
<li>把所有命令都放在/bin里，把/bin放在路径里</li>
<li>关闭 <code>SIP</code>：<ol>
<li>重启电脑，在重启的界面上按住 <em>Command</em> 和 <em>R</em> 键进入 <code>Recovery Mode</code>；</li>
<li>左上角通用工具选择终端，运行：<code>csrutil disable</code> 和 <code>reboot</code></li>
</ol>
</li>
</ul>
<h2 id="5-使用-Proxychains"><a href="#5-使用-Proxychains" class="headerlink" title="5. 使用 Proxychains"></a>5. 使用 Proxychains</h2><p>在要使用代理的命令前面加上 <code>proxychains4</code>即可；或者对当前终端都使用代理：</p>
<pre><code class="bash">Proxychains4 bash
</code></pre>
<p>然后你输入的命令都会走代理了。</p>
<p>测试：<code>curl https://www.twitter.com/</code> 若没有报错就表示代理成功啦。</p>
]]></content>
      
        
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 GitHub-Pages 和 Hexo 搭建个人博客]]></title>
      <url>/2018/02/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>相信大多数人都使用过博客吧？最早的博客大概是QQ空间了。初高中的我们特别爱玩空间，转发着各种《男生看完会沉默，女生看了会流泪》、《喜欢与爱的区别》（尽管我们完全不懂爱）这类文章。后来百度也想分一块蛋糕，搞了一个什么百度空间，对于百度用户而言体验倒是还不错，后面没落的原因我也记不清了。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于一个技术人员来说，写一些文章总是有益处的：既可以锻炼文笔、总结自己的经验、让自己的思维更清晰，又能给别人指路、避免踩一些没必要的坑。所以我想大家或许都在 CSDN 之类的技术网站创建过 Blog 吧。我也建立过，后来……就没有后来了。因为我用了世界上最大的同性交友网站 GayHub 哦不，是 GitHub。用了它之后，我如果想写什么东西，直接创建一个 repository 在 README 里写就好了。</p>
<p>慢慢地，我发现 repository 已经不能满足我的欲♂望了。倒不是我写的东西太多了，只是它的逼格还不够高（真的只是这样）。于是乎，我们自然而然地了解到了标题的内容，在我的实践之后也就有了今天这篇文章。顺便补充一句，一开始我用的是 Github 官方支持的 <a href="http://jekyllcn.com/docs/home/" target="_blank" rel="noopener">Jekyll</a>，无奈遇到了很多坑（文档不够清晰也许是我理解能力差，但是我试了好多方法，怎么都改不了主题），只能转战 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo</a>，好在后者也是主流的 blog framework，用起来倒没什么问题。</p>
<h2 id="有什么好处？"><a href="#有什么好处？" class="headerlink" title="有什么好处？"></a>有什么好处？</h2><p>使用 GitHub-Pages 和 Hexo 搭建博客，可以让你拥有美观的主题，由于服务器在 Github，可以避免因为政策原因受到莫名其妙的和谐。</p>
<h2 id="开始吧！"><a href="#开始吧！" class="headerlink" title="开始吧！"></a>开始吧！</h2><h2 id="0-安装-Hexo"><a href="#0-安装-Hexo" class="headerlink" title="0. 安装 Hexo"></a>0. 安装 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo</a></h2><p>安装 Hexo 很简单。但是首先你得确保你安装了 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 和 <a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>：</p>
<pre><code>$ npm install -g hexo-cli
</code></pre><p>然后<a href="https://github.com/new" target="_blank" rel="noopener">创建</a>一个以<code>你的用户名.github.io</code>为名称的仓库</p>
<h2 id="1-创建博客"><a href="#1-创建博客" class="headerlink" title="1. 创建博客"></a>1. 创建博客</h2><p>下面的命令创建了一个名为 blog 的文件夹并且进行了初始化）：</p>
<pre><code>$ mkdir blog
$ hexo init blog
$ cd blog
$ npm install
</code></pre><p>执行完毕，你的 blog 文件夹会长这样：</p>
<pre><code>├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
</code></pre><h2 id="2-写文章"><a href="#2-写文章" class="headerlink" title="2. 写文章"></a>2. 写文章</h2><p>使用下面的命令来创建文章，新建的文章会生成在<code>source/_posts</code>目录 ：</p>
<pre><code>$ hexo new [layout] &lt;title&gt;
</code></pre><p>其中<code>layout</code>是可选的，默认有<code>post</code>, <code>page</code> , <code>draft</code>三种，你可以到<code>scaffolds</code>目录下查看，你也可以自定义布局。如果不输入<code>layout</code>默认为 <code>post</code>。</p>
<h2 id="3-发布博客"><a href="#3-发布博客" class="headerlink" title="3. 发布博客"></a>3. 发布博客</h2><p>生成静态文件的命令是<code>$ hexo generate</code>，我不知道啥时候用，就不说了。</p>
<p>至于发布博客，严格来说叫部署（deploy）也很简单。</p>
<ol>
<li>安装插件：<code>npm install hexo-deployer-git --save</code> </li>
<li>到<code>_config.yml</code>配置一下你的 Git 地址（顺便把其他自定义的东西也改了吧）：</li>
</ol>
<pre><code>deploy:
  type: git
  repo: https://github.com/你的用户名/你的用户名.github.io
  branch: master
  message: [message]
</code></pre><ol>
<li>部署博客：<code>$ hexo deploy</code>或 <code>$ hexo deploy --generate</code></li>
</ol>
<p>搞定，现在<code>你的用户名.github.io</code>就是你的个人博客了！如果还不想发布（或者发布失败），只是本地预览，可以使用<code>$ hexo serve</code>来开启本地服务，浏览器里打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 来看看博客是否符合你的预期。</p>
]]></content>
      
        
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Article Test]]></title>
      <url>/2018/02/06/test/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>&#x6D4B;&#x8BD5;&#x4E00;&#x4E0B;&#x56FE;&#x7247;&#x80FD;&#x4E0D;&#x80FD;&#x663E;&#x793A;~</p>
<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3031053483,3171700629&amp;fm=27&amp;gp=0.jpg" alt=""></p>
<a id="more"></a>
<iframe width="560" height="315" src="https://www.youtube.com/embed/XequIguJjFs" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

<p>&#x6D4B;&#x8BD5;&#x4E00;&#x4E0B;&#x56FE;&#x7247;&#x3001;&#x89C6;&#x9891;&#x7B49;</p>
]]></content>
      
        
        <tags>
            
            <tag> photo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
