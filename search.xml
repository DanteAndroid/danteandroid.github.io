<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[使用Proxychains代理命令行]]></title>
      <url>/2018/04/17/%E4%BD%BF%E7%94%A8Proxychains%E4%BB%A3%E7%90%86%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>如果你已经在使用 Shadowsocks，但是需要用命令行来下载 GFW 外的文件，那么你可以使用 Proxychains 代理命令行（Terminal）</p>
<a id="more"></a>
<ol>
<li><p>准备工作</p>
<p>在命令行输入<code>brew</code>以检查是否安装了<a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>，若没有，则输入下面的命令来安装：</p>
<pre><code class="bash">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
</li>
<li><p>输入下面的命令安装<code>Proxychains</code>：</p>
<pre><code>brew install proxychains-ng
</code></pre></li>
<li><p>查看 <code>shadowsocks</code> 本地端口号（端口号默认是 <code>1080</code>）</p>
<p>设置——本地 Socks5 监听地址（以及端口）</p>
</li>
<li><p>修改 Proxychains 配置文件<code>/usr/local/etc/proxychains.conf</code></p>
<pre><code>vim /usr/local/etc/proxychains.conf
</code></pre></li>
</ol>
<p>vim是文本编辑命令，按下<code>I</code>进入编辑，找到文件最后的<code>[ProxyList]</code>, 输入步骤2查看的本地监听地址和端口，如<code>socks5  127.0.0.1 1080</code>, 然后点esc，输入<code>:wq</code>进行保存</p>
<ol>
<li><p>如果使用的<strong>OS X 系统 是 10.11 以下，则跳过这一步</strong>。由于 OS X 的新版本引入了一个新机制 <code>SIP (System Integrity Protection)</code>，即使 Root 权限也不能对一些二进制进行修改，这些二进制是在 <code>/System，/bin，/sbin，/usr (except /usr/local)</code> 中的。这就影响了 <code>proxychains</code> 的作用范围，不在上述目录中的二进制可以使用 <code>proxychains</code>，而在其中的就不行了。从目前的资料有来，有以下两种解决方法：</p>
<ul>
<li><p>把所有命令都放在/bin里，把/bin放在路径里</p>
</li>
<li><p>关闭 <code>SIP</code>：</p>
<ol>
<li>重启电脑，在重启的界面上按住 <em>Command</em> 和 <em>R</em> 键进入 <code>Recovery Mode</code>；</li>
</ol>
</li>
</ul>
</li>
</ol>
<pre><code> 2. 左上角通用工具选择终端，运行：`csrutil disable` 和 `reboot`
</code></pre><ol>
<li><p>在要使用代理的命令前面加上 <code>proxychains4</code>即可；或者对当前终端都使用代理：</p>
<pre><code>Proxychains4 bash
</code></pre><p>然后你输入的命令都会走代理了。测试：<code>curl https://www.twitter.com/</code>若没有报错就表示代理成功啦。</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 GitHub-Pages 和 Hexo 搭建个人博客]]></title>
      <url>/2018/02/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大多数人都使用过博客吧？最早的博客大概是QQ空间了。初高中的我们特别爱玩空间，转发着各种《男生看完会沉默，女生看了会流泪》、《喜欢与爱的区别》（尽管我们完全不懂爱）这类文章。后来百度也想分一块蛋糕，搞了一个什么百度空间，对于百度用户而言体验倒是还不错，后面没落的原因我也记不清了。</p>
<a id="more"></a>
<p>对于一个技术人员来说，写一些文章总是有益处的：既可以锻炼文笔、总结自己的经验、让自己的思维更清晰，又能给别人指路、避免踩一些没必要的坑。所以我想大家或许都在 CSDN 之类的技术网站创建过 Blog 吧。我也建立过，后来……就没有后来了。因为我用了世界上最大的同性交友网站 GayHub 哦不，是 GitHub。用了它之后，我如果想写什么东西，直接创建一个 repository 在 README 里写就好了。</p>
<p>慢慢地，我发现 repository 已经不能满足我的欲♂望了。倒不是我写的东西太多了，只是它的逼格还不够高（真的只是这样）。于是乎，我们自然而然地了解到了标题的内容，在我的实践之后也就有了今天这篇文章。顺便补充一句，一开始我用的是 Github 官方支持的 <a href="http://jekyllcn.com/docs/home/" target="_blank" rel="noopener">Jekyll</a>，无奈遇到了很多坑（文档不够清晰也许是我理解能力差，但是我试了好多方法，怎么都改不了主题），只能转战 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo</a>，好在后者也是主流的 blog framework，用起来倒没什么问题。</p>
<h2 id="有什么好处？"><a href="#有什么好处？" class="headerlink" title="有什么好处？"></a>有什么好处？</h2><p>使用 GitHub-Pages 和 Hexo 搭建博客，可以让你拥有美观的主题，由于服务器在 Github，可以避免因为政策原因受到莫名其妙的和谐。</p>
<h1 id="开始吧！"><a href="#开始吧！" class="headerlink" title="开始吧！"></a>开始吧！</h1><h2 id="0-安装-Hexo"><a href="#0-安装-Hexo" class="headerlink" title="0. 安装 Hexo"></a>0. 安装 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo</a></h2><p>安装 Hexo 很简单。但是首先你得确保你安装了 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 和 <a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>：</p>
<p><code>$ npm install -g hexo-cli</code></p>
<h2 id="1-创建博客"><a href="#1-创建博客" class="headerlink" title="1. 创建博客"></a>1. 创建博客</h2><p>下面的命令创建了一个名为 blog 的文件夹并且进行了初始化）：</p>
<pre><code>$ mkdir blog
$ hexo init blog
$ cd blog
$ npm install
</code></pre><p>执行完毕，你的 blog 文件夹会长这样：</p>
<pre><code>├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
</code></pre><h2 id="2-写文章"><a href="#2-写文章" class="headerlink" title="2. 写文章"></a>2. 写文章</h2><p>使用下面的命令来创建文章，新建的文章会生成在<code>source/_posts</code>目录 ：</p>
<p><code>$ hexo new [layout] &lt;title&gt;</code></p>
<p>其中<code>layout</code>是可选的，默认有<code>post</code>, <code>page</code> , <code>draft</code>三种，你可以到<code>scaffolds</code>目录下查看，你也可以自定义布局。如果不输入<code>layout</code>默认为 <code>post</code>。</p>
<h2 id="3-发布博客"><a href="#3-发布博客" class="headerlink" title="3. 发布博客"></a>3. 发布博客</h2><p>生成静态文件的命令是<code>$ hexo generate</code>，我不知道啥时候用，就不说了。</p>
<p>至于发布博客，严格来说叫部署（deploy）也很简单。</p>
<ol>
<li><a href="https://github.com/new" target="_blank" rel="noopener">创建</a>一个以<code>你的用户名.github.io</code>为名称的仓库</li>
<li>安装插件：<code>npm install hexo-deployer-git --save</code> </li>
<li>到<code>_config.yml</code>配置一下你的 Git 地址（顺便把其他自定义的东西也改了吧）：</li>
</ol>
<pre><code>deploy:
  type: git
  repo: https://github.com/你的用户名/你的用户名.github.io
  branch: master
  message: [message]
</code></pre><ol>
<li>部署博客：<code>$ hexo deploy</code>或者<code>$ hexo deploy --generate</code></li>
</ol>
<p>搞定！现在<code>你的用户名.github.io</code>就是你的个人博客了！如果还不想发布（或者发布失败），只是本地预览，可以使用：<code>$ hexo serve</code>来开启本地服务，并且浏览器里打开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 来看看博客是否符合你的预期。</p>
]]></content>
      
        
        <tags>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Article Test]]></title>
      <url>/2018/02/06/test/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>测试一下图片能不能显示~</p>
<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3031053483,3171700629&amp;fm=27&amp;gp=0.jpg" alt=""></p>
<a id="more"></a>
<p>测试一下图片、视频等</p>
]]></content>
      
        
        <tags>
            
            <tag> photo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2018/02/06/hello-world/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
